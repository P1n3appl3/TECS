class Piece {
    static Array data;
    field int x, y, rotation, type;
    field Array shape;

    constructor Piece new(int t){
        let type = t;
        let rotation = 0;
        let y = 0;
        let x = 3;
        if(type<2){ //I and O pieces are 4 wide so they are placed one more to the left
            let x = 3;
        }
        let shape = Piece.getPiece(t, rotation);
        return this;
    }

    method void rotate(int a){
        let shape = Piece.getPiece(type, Util.mod(rotation+4+a, 4));
        return;
    }

    method void setX(int a){
        let x = a;
        return;
    }

    method void setY(int a){
        let y = a;
        return;
    }

    method int getX(){
        return x;
    }

    method int getY(){
        return y;
    }

    method int getSegmentX(int a){
        var Vector temp;
        let temp = shape[a];
        return temp.getX() + x;
    }

    method int getSegmentY(int a){
        var Vector temp;
        let temp = shape[a];
        return temp.getY() + y;
    }

    method void draw(Board b){
        var int bx, by, bsize, i, tempX, tempY;
        var Vector temp;
        let bx = b.getX();
        let by = b.getY();
        let bsize = b.getSize();
        let i = 0;
        while(i<4){
            let temp = shape[i];
            let tempY = temp.getY();
            if(tempY+y>1){
                let tempX = temp.getX();
                do Screen.setColor(true);
                do Screen.drawRectangle(((x+tempX)*bsize)+bx+1, ((y+tempY-2)*bsize)+by+1, ((x+tempX+1)*bsize)+bx-1, ((y+tempY-1)*bsize)+by-1);
            }
            let i = i + 1;
        }
        return;
    }

    function Array getPiece(int sel, int rot){
        var Array temp;
        let temp = data[sel];
        return temp[rot];
    }

    function void init(){
        var int i, j;
        var Array temp, n;
        let data = Array.new(7);
        let i = 0;
        while(i<7){
            let data[i] = Array.new(4);
            let j = 0;
            while(j<4){
                let temp = data[i];
                let temp[j] = Array.new(4);
                let j = j + 1;
            }
            let i = i + 1;
        }
        //see notes.txt for the deduction of these constants
        let n = data[0]; // I
        let temp = n[0];
        let temp[0] = Vector.new(0, 1);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(2, 1);
        let temp[3] = Vector.new(3, 1);
        let temp = n[1];
        let temp[0] = Vector.new(2, 0);
        let temp[1] = Vector.new(2, 1);
        let temp[2] = Vector.new(2, 2);
        let temp[3] = Vector.new(2, 3);
        let temp = n[2];
        let temp[0] = Vector.new(0, 2);
        let temp[1] = Vector.new(1, 2);
        let temp[2] = Vector.new(2, 2);
        let temp[3] = Vector.new(3, 2);
        let temp = n[3];
        let temp[0] = Vector.new(1, 0);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(1, 2);
        let temp[3] = Vector.new(1, 3);

        let n = data[1]; // O
        let temp = n[0];
        let temp[0] = Vector.new(1, 0);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(2, 1);
        let temp[3] = Vector.new(2, 0);
        let temp = n[1];
        let temp[0] = Vector.new(1, 0);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(2, 1);
        let temp[3] = Vector.new(2, 0);
        let temp = n[2];
        let temp[0] = Vector.new(1, 0);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(2, 1);
        let temp[3] = Vector.new(2, 0);
        let temp = n[3];
        let temp[0] = Vector.new(1, 0);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(2, 1);
        let temp[3] = Vector.new(2, 0);

        let n = data[2]; // T
        let temp = n[0];
        let temp[0] = Vector.new(1, 0);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(2, 1);
        let temp[3] = Vector.new(0, 1);
        let temp = n[1];
        let temp[0] = Vector.new(1, 0);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(1, 2);
        let temp[3] = Vector.new(2, 1);
        let temp = n[2];
        let temp[0] = Vector.new(0, 1);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(2, 1);
        let temp[3] = Vector.new(1, 2);
        let temp = n[3];
        let temp[0] = Vector.new(0, 1);
        let temp[1] = Vector.new(1, 0);
        let temp[2] = Vector.new(1, 2);
        let temp[3] = Vector.new(1, 1);

        let n = data[3]; // S
        let temp = n[0];
        let temp[0] = Vector.new(0, 1);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(1, 0);
        let temp[3] = Vector.new(2, 0);
        let temp = n[1];
        let temp[0] = Vector.new(1, 0);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(2, 1);
        let temp[3] = Vector.new(2, 2);
        let temp = n[2];
        let temp[0] = Vector.new(0, 2);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(1, 2);
        let temp[3] = Vector.new(2, 1);
        let temp = n[3];
        let temp[0] = Vector.new(0, 0);
        let temp[1] = Vector.new(0, 1);
        let temp[2] = Vector.new(1, 1);
        let temp[3] = Vector.new(1, 2);

        let n = data[4]; // Z
        let temp = n[0];
        let temp[0] = Vector.new(0, 0);
        let temp[1] = Vector.new(1, 0);
        let temp[2] = Vector.new(1, 1);
        let temp[3] = Vector.new(2, 1);
        let temp = n[1];
        let temp[0] = Vector.new(2, 0);
        let temp[1] = Vector.new(2, 1);
        let temp[2] = Vector.new(1, 1);
        let temp[3] = Vector.new(1, 2);
        let temp = n[2];
        let temp[0] = Vector.new(0, 1);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(1, 2);
        let temp[3] = Vector.new(2, 2);
        let temp = n[3];
        let temp[0] = Vector.new(0, 1);
        let temp[1] = Vector.new(0, 2);
        let temp[2] = Vector.new(1, 0);
        let temp[3] = Vector.new(1, 1);

        let n = data[5]; // J
        let temp = n[0];
        let temp[0] = Vector.new(0, 0);
        let temp[1] = Vector.new(0, 1);
        let temp[2] = Vector.new(1, 1);
        let temp[3] = Vector.new(2, 1);
        let temp = n[1];
        let temp[0] = Vector.new(1, 0);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(1, 2);
        let temp[3] = Vector.new(2, 0);
        let temp = n[2];
        let temp[0] = Vector.new(0, 1);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(2, 1);
        let temp[3] = Vector.new(2, 2);
        let temp = n[3];
        let temp[0] = Vector.new(0, 2);
        let temp[1] = Vector.new(1, 0);
        let temp[2] = Vector.new(1, 1);
        let temp[3] = Vector.new(1, 2);

        let n = data[6]; // L
        let temp = n[0];
        let temp[0] = Vector.new(0, 1);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(2, 0);
        let temp[3] = Vector.new(2, 1);
        let temp = n[1];
        let temp[0] = Vector.new(1, 0);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(1, 2);
        let temp[3] = Vector.new(2, 0);
        let temp = n[2];
        let temp[0] = Vector.new(0, 1);
        let temp[1] = Vector.new(1, 1);
        let temp[2] = Vector.new(2, 2);
        let temp[3] = Vector.new(2, 1);
        let temp = n[3];
        let temp[0] = Vector.new(0, 2);
        let temp[1] = Vector.new(1, 0);
        let temp[2] = Vector.new(1, 1);
        let temp[3] = Vector.new(1, 2);
        return;
    }

    method void deinit(){
        var int i, j;
        var Array temp, n;
        let i = 0;
        while(i<7){
            let j = 0;
            let temp = data[i];
            while(j<4){
                let temp[j] = n;
                do n.dispose();
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    method void dispose(){
        do shape.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
