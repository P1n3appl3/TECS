class Piece {
    static Array data;
    field int x, y, rotation, type;
    field Array shape;

    constructor Piece new(int t){
        let type = t;
        let rotation = 0;
        let y = 21;
        do Output.printString("test1");
        let shape = Piece.decode(t, 0);
        do Output.printString("test2");
        let x = 4;
        if(type<2){ //I and O pieces are 4 wide so they are placed one more to the left
            let x = 3;
        }
        return this;
    }

    method void setX(int a){
        let x = a;
        return;
    }

    method void setY(int a){
        let y = a;
        return;
    }

    method int getX(){
        return x;
    }

    method int getY(){
        return y;
    }

    method void draw(Board b){
        var int bx, by, bsize, i, tempX, tempY;
        var Vector temp;
        let bx = b.getX();
        let by = b.getY();
        let bsize = b.getSize();
        let i = 0;
        while(i<4){
            let temp = shape[i];
            let tempX = temp.getX();
            let tempY = temp.getY();
            do Screen.setColor(true);
            do Screen.drawRectangle((tempX*bsize)+bx, (tempY*bsize)+by, ((tempX+1)*bsize)+bx, ((tempY+1)*bsize)+by);
            let i = i+1;
        }
        return;
    }

    function Array decode(int a, int b){
        var int temp, i, j;
        var Array out;
        let i = 14;
        let j = 0;
        let out = Array.new(4);
        let temp = data[a];
        let temp = temp[b];
        while(i>-1){
            if(Main.isOdd(temp)){
                let out[j] = Vector.new(Main.mod(i,4), i/4);
                let j = j+1;
            }
            let temp = temp/2; //bitshift right
            let i = i+1;
        }
        return out;
    }

    function void init(){
        var int i, temp;
        let data = Array.new(7);
        let i = 0;
        while(i<7){
            let data[i] = Array.new(4);
            let i = i+1;
        }
        //see notes.txt for the deduction of these constants
        let temp = data[0];
        let temp[0] = 1920;
        let temp[1] = 4369;
        let temp[2] = 120;
        let temp[3] = 8738;
        let temp = data[1];
        let temp[0] = 13056;
        let temp[1] = 13056;
        let temp[2] = 13056;
        let temp[3] = 13056;
        let temp = data[2];
        let temp[0] = 9984;
        let temp[1] = 8992;
        let temp[2] = 1824;
        let temp[3] = 9760;
        let temp = data[3];
        let temp[0] = 13824;
        let temp[1] = 8976;
        let temp[2] = 864;
        let temp[3] = 17952;
        let temp = data[4];
        let temp[0] = 25344;
        let temp[1] = 4896;
        let temp[2] = 1584;
        let temp[3] = 9792;
        let temp = data[5];
        let temp[0] = 18176;
        let temp[1] = 12832;
        let temp[2] = 1808;
        let temp[3] = 8800;
        let temp = data[6];
        let temp[0] = 5888;
        let temp[1] = 8752;
        let temp[2] = 1856;
        let temp[3] = 25120;
        return;
    }

    method void dispose(){
        do shape.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
