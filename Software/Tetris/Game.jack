class Game {
    field Board board;
    field Piece current, next;

    constructor Game new(Board b){
        let board = b;
        let current = Piece.new(4);
        let next = Piece.new(2);
        return this;
    }

    method void run(){
        //poll for inputs and timer
        //rotate and translate instantly resetting timer
        return;
    }

    /** returns true if it went down and false if it locked*/
    method boolean drop(){
        var Vector temp;
        if(~isValid(0, 1)){
            do lock();
            return false;
        }
        do current.setY(current.getY()+1);
        return true;
    }

    method void lock(){
        var int i;
        let i = 0;
        while(i<4){
            do board.set(current.getSegmentX(i), current.getSegmentY(i), true);
            let i = i + 1;
        }
        do nextPiece();
        return;
    }

    /** takes 1 or -1 for clockwise or counterclockwise */
    method boolean rotate(int a){
        do current.rotate(a);
        if(isValid(0,0)){
            return true;
        }
        do current.rotate(-a);
        return false;
    }

    /** a and b are x and y displacement of spot to test for current piece and rotation */
    method boolean isValid(int a, int b){
        var int i;
        let i = 0;
        while(i < 4){
            if((current.getSegmentY(i) + b < 22) & (current.getSegmentY(i) + b > -1) & (current.getSegmentX(i) + a < 10) & (current.getSegmentX(i) + a > -1)){
                if(board.get(current.getSegmentX(i)+a, current.getSegmentY(i)+b)){
                    return false;
                }
            }
            else{
                return false;
            }
            let i = i + 1;
        }
        return true;
    }

    method void nextPiece(){
        do current.dispose(); //idk about memory management here
        let current = next;
        let next = Piece.new(5);//generateRandomPiece();
        return;
    }

// x 88 z 90
    method void test(){
        var int i, key, delay, temp;
        var boolean pressed;
        let delay = 5000;
        let key = 0;
        let i = 0;
        do current.setY(10);
        while(true){
            let pressed = false;
            let temp = Keyboard.keyPressed();
            if(~(key=temp)){
                let pressed = true;
            }
            let key = temp;
            let i = i + 1;
            //do Output.moveCursor(0,0);
            //do Output.printString("                                   ");
            //do Output.moveCursor(0,0);
            //do Output.printInt(key);
            //do Output.printString(" ");
            //do Output.printInt(pressed);
            if(pressed){
                if((key=90) | (key=88)){ // z and x respectively
                    if(rotate(current.getRotation()-(key-89))){
                        do Output.moveCursor(0,0);
                        do Output.printInt(-(key-89));
                        let i = 0;
                        do board.draw();
                        do current.draw(board);
                    }
                }
                if((key=130) | (key=132)){ //left and right respectively
                    if(isValid(key-131, 0)){
                        do current.setX(current.getX()+key-131);
                        let i = 0;
                        do board.draw();
                        do current.draw(board);
                    }
                }
                if(key=131){ //up for fast drop
                    while(drop()){}
                    let i = 0;
                    do board.draw();
                    do current.draw(board);
                }
            }
            if((i>delay)|(key=133)){ //time is up or pressed down so drop 1 level
                do drop();
                let i = 0;
                do board.draw();
                do current.draw(board);
            }
        }
        return;
    }
}
